#!/bin/bash

source /root/internal-scripts/common.sh

if [ $$ -ne 1 ]; then
	SCRIPT_NAME=$(basename "$0")
	echo "ERROR: the '$SCRIPT_NAME' script MUST be run as the main container process (PID 1)" \
	     "to ensure proper handling of termination signals."
	echo "However, the current PID is $$. If you are calling this script from a custom wrapper," \
	     "make sure to use the 'exec' command."
	exit 1
fi

function on_termination_signal {
    dispatch-log "Received a termination signal"
    /root/internal-scripts/onezone-ensure-stopped.sh
    dispatch-log "Main process exiting"
}

trap on_termination_signal SIGHUP SIGINT SIGTERM

# make sure the graceful stop marker is not set; see common.sh
rm -f ${GRACEFUL_STOP_LOCK_FILE}

# must be done before dispatch-log, which writes to a persistent directory
/root/persistence-dir.py --copy-missing-files

dispatch-log "Main process starting" extra_linebreak_in_log_file

IP=$(hostname -i)
if [ $1"x" == "bashx" ]; then
    /bin/bash  
else 
    echo -e "\e[1;33m"
    echo "-------------------------------------------------------------------------"
    echo "Starting Onezone in demo mode..."
    echo "Visit https://${IP}/ in your browser (ignore the untrusted cert)," 
    echo "but *when the service has booted up*! It may take a minute or two."
    echo "You may also add such an entry to /etc/hosts: \"${IP} onezone.local\"" 
    echo "and visit https://onezone.local, because for some browsers"
    echo "the UI may not function correctly when using the IP address."
    echo "-------------------------------------------------------------------------"
    if [ -t 1 ]; then
	echo -e "\e[1;31m Copy the link for later use and press Enter to continue. \e[0m"
	read
    fi
fi

HN=`hostname`
export ONEPANEL_DEBUG_MODE="true" # prevents container exit on configuration error
export ONEPANEL_BATCH_MODE="true"
export ONEPANEL_LOG_LEVEL="info" # prints logs to stdout (possible values: none, debug, info, error), by default set to info
export ONEPANEL_EMERGENCY_PASSPHRASE="password"
export ONEPANEL_GENERATE_TEST_WEB_CERT="true"  # default: false
export ONEPANEL_GENERATED_CERT_DOMAIN="onezone.local"  # default: ""
export ONEPANEL_TRUST_TEST_CA="false"  # default: false

export ONEZONE_CONFIG=$(cat <<EOF
        cluster:
          domainName: "onezone.local"
          nodes:
            n1:
              hostname: "${HN}"
          managers:
            mainNode: "n1"
            nodes:
              - "n1"
          workers:
            nodes:
              - "n1"
          databases:
            nodes:
              - "n1"
        onezone:
          name: "${HN}"
          domainName: "onezone.local"
          letsEncryptEnabled: false
EOF
)
sed "s/${HN}\$/${HN}-node.onezone.local ${HN}-node/g" /etc/hosts > /tmp/hosts.new
cat /tmp/hosts.new > /etc/hosts
rm /tmp/hosts.new
echo "127.0.1.1 ${HN}.onezone.local ${HN}" >> /etc/hosts
/root/onezone.py &

wait $!
